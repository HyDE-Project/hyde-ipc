searchState.loadedDescShard("hyde_ipc", 0, "a wrapper around the hyprland library (used lovally for …\nContains the error value\nContains the success value\nThis type provides the result type used everywhere in …\nCreates a async closure\nMacro abstraction over Binder\nCreates a <code>CommandContent</code> instance with the given flag and …\nThis module provides helpers to easily config Hyprland\nThis module is for calling hyprctl <strong>commands</strong>, for getting …\nThis module provides functions for getting information on …\nThis module is for calling dispatchers and changing …\nMacro abstraction over Dispatch::call\nThis module provides the EventListener struct for …\nThis module provides the stuff needed to mutate, and read …\nThe prelude module, this is to import all traits\nThis module provides shared things throughout the crate\nModule providing stuff for adding an removing keybinds\nStruct to hold methods for adding and removing binds\nA struct providing a key bind\nEnum for bind flags\nType for a key held by a bind\nVariant for a regular key\nEnum for mod keys used in bind combinations\nVariant for if the bind holds a modded key\nBinds a keybinding\nBinds a keybinding (async)\nHas description, will allow you to write a description for …\nThe dispatcher to be called once complete\nRepeats when held\nBind flags\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIgnore mods, will ignore modifiers.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe key\nWorks when screen is locked\nUsed for mouse binds\nAll the mods\nNon-consuming, key/mouse events will be passed to the …\nBypasses the app’s requests to inhibit keybinds.\nActivates on release\nSeparate, will arbitrarily combine keys between each …\nTransparent, cannot be shadowed by other binds.\nA 8-bit color with a alpha channel\nDismisses all or up to a specified amount of notifications …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEnter kill mode (similar to xkill)\nCreates a notification with Hyprland\nStuff related to managing virtual outputs/displays\nProvides functions for communication with plugin system\nReload hyprland config\nSet the cursor theme\nCreates a error that Hyprland will display\nProvides things to setting props\nSwitch the xkb layout index for a keyboard\nDismisses notifications with Hyprland\nDismisses notifications with Hyprland (async)\nEnter kill mode (similar to xkill)\nEnter kill mode (similar to xkill) (async)\nCreates a notification with Hyprland\nCreates a error that Hyprland will display (async)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLet Hyprland decide the backend type\nThe headless output backend\nOutput backend types\nThe wayland output backend\nThe x11 output backend\nCreate virtual displays\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRemove virtual displays\nReturns a list of all plugins\nReturns a list of all plugins (async)\nLoads a plugin, by path\nLoads a plugin, by path (async)\nReload hyprland config\nReload hyprland config (async)\nSet the cursor theme\nSet the cursor theme (async)\nCreates a error that Hyprland will display\nCreates a error that Hyprland will display (async)\nThe active border color\nThe alpha\nThe alpha for inactive\nMakes the next setting be override instead of multiply\nMakes the next setting be override instead of multiply\nThe animation style\nDim around?\nForce allow input\nForce no animations\nForce no blur\nForce no border\nForce no shadow\nForce opaque\nForce opaque overriden\nThe inactive border color\nAllow for overstepping max size\nType that represents a prop\nThe roundness\nAllow for windoe dancing?\nSets a window prob\nSets a window prob (async)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSet to a specific input id\nNext input\nPrevious inout\nThe types of Cmds used by switch_xkb_layout\nSwitch the xkb layout index for a keyboard\nSwitch the xkb layout index for a keyboard\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe belongsTo data if the tablet is of type TabletTool\nA struct representing a animation\nAnimation styles\nStruct that holds animations and beziers\nA bezier curve\nBezier identifier\nA keybinding returned from the binds command\nThis struct holds a vector of binds\nThis struct holds information for a client/window\nThis struct holds a vector of clients\nThis struct holds information on the cursor position\nThe default bezier\nThis struct holds all current devices\nFade animation\nFlipped\nFlipped and rotated 180 degrees\nFlipped and rotated 270 degrees\nFlipped and rotated 90 degrees\nFullscreen window\nThis struct holds information for a client/window …\nA helper struct that provides the current fullscreen state\nThis struct holds information about a keyboard device\nThis struct holds information about a layer surface/client\nThis struct holds all the layer surfaces for a display\nThis struct holds a hashmap of all current displays, and …\nLoop animation used for gradient animation\nMaximized window\nMaximized and fullscreen window\nThis struct holds information for a monitor\nThis struct holds a vector of monitors\nThis struct holds information about a mouse device\nNormal window\nNo animation style\nNo bezier specified\nNo transform\nRotated 180 degrees\nRotated 270 degrees\nRotated 90 degrees\nOnce animation used for gradient animation\nPopin animation (with percentage)\nSlide animation\nFading slide animation\nFading slide animation in a vertical direction\nVertical slide animation\nA specified bezier\nThis struct holds information about a tablet device\nA enum to match what the tablet belongs to\nThe TabletPad type of tablet\nThe belongsTo data if the tablet is of type TabletPad\nThe TabletTool type of tablet\nA enum that holds the types of tablets\nThis enum provides the different monitor transforms\nUnknown style\nThis struct holds version information\nThis struct holds information for a workspace\nThis struct holds a basic identifier for a workspace often …\nThis struct holds a vector of workspace rules per workspace\nThe rules of an individual workspace, as returned by …\nThis type provides a vector of workspaces\nThe keyboard’s active keymap\nA basic identifier for the active workspace\nThe client’s <code>Address</code>\nThe layer’s <code>Address</code>\nThe mouse’s address\nThe keyboard’s address\nThe tablet’s address\nThe dispatcher arg\nThe window location\nWhat the tablet belongs to\nWhat bezier does it use?\nThis method returns a bool of the current fullscreen state\nAre borders enabled?\nThe size of window borders\nThe git branch Hyprland was built on\nAquamarine version\nThe window class\nThe git commit Hyprland was built on\nThe git commit date\nThe git commit message\nThe amount of commits to Hyprland at buildtime\nAre window decorations enabled?\nIs it default?\nThe monitor’s description\nThis is true if there were unstaged changed when Hyprland …\nIs the monitor disabled or not\nThe dispatcher to be executed\nThe dpms status of a monitor\nIs it enabled?\nThe flags that Hyprland was built with\nIs this window floating?\nWhen was this window last focused relatively to other …\na string that identifies if the display is active\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA bool that shows if there is a fullscreen window in the …\nThe internal fullscreen mode\nThe client fullscreen mode\nThe gaps between windows\nThe gaps between windows and monitor edges\nGroup members\nThe layer’s height\nThe monitor height (in pixels)\nThe workspace Id\nThe monitor id\nThe workspace Id\nThe initial window class\nThe initial window title\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates the consuming iterator by keys with type <code>String</code> of …\nCreates the consuming iterator by keys with type <code>String</code> of …\nCreates the consuming iterator by values of <code>LayerDisplay</code>.\nCreates the consuming iterator by values of <code>Layers</code>.\nCreates the iterator by references of <code>Monitors</code>.\nCreates the iterator by references of <code>Workspaces</code>.\nCreates the iterator by references of <code>Clients</code>.\nCreates the iterator of map by references of LayerDisplay\nCreates the iterator of map by references of Layers\nCreates the iterator by references of <code>Binds</code>.\nCreates the iterator by references of <code>WorkspaceRules</code>.\nCreates the iterator by mutable references of Monitors`.\nCreates the iterator by mutable references of Workspaces`.\nCreates the iterator by mutable references of Clients`.\nCreates the iterator of map by mutable references of …\nCreates the iterator of map by mutable references of <code>Layers</code>…\nCreates the iterator by mutable references of Binds`.\nCreates the iterator by mutable references of …\nThe key\nAll the keyboards\nThe keycode\nThe last window’s Address\nThe last window’s title\nThe layout of the keyboard\nThe different levels of layers\nIs it locked?\nThe keyboard’s primary status\nIs this window print on screen\nAll the mice\nThe keyboard model\nIt’s modmask\nThe monitor the workspace is on\nThe monitor id the window is on, can be None in some cases\nThe monitor the workspace is on\nThe monitor id the workspace is on, can be None in some …\nIs it a mouse bind?\nThe workspace’s name\nThe monitor’s name\nThe workspace’s name\nThe mouse’s name\nThe keyboard’s name\nThe name of the tablet\n. Name of the bezier\nThe name of the animation\nThe layer’s namespace\nThe keyboard options\nIs it overridden?\nIs it persistent?\nThe process Id of the client\nIs this window pinned?\nThe monitor’s refresh rate (in hertz)\nDoes it execute on release?\nCan it be held?\nReserved is the amount of space (in pre-scale pixels) that …\nIs rounding enabled?\nThe keyboard rules\nThe display’s scale\nAre shadows enabled?\nThe window size\nA basic identifier for the special workspace\nHow fast is it?\nThe style of animation\nThe submap its apart of\nThe swallowed window\nThe tablet type\nAll the tablets\nThe git tag hyprland was built on\nThe window title\nI think like the rotation?\nThe keyboard variant\nThe Hyprland version\nVRR state\nThe layer’s width\nThe monitor width (in pixels)\nThe amount of windows in the workspace\nThe workspace its on\nThe name of the workspace\nThe monitor’s position on the x axis (not irl ofc)\nThe layer’s x position\nThe x position of the cursor\nX position of first point\nX position of second point\nIs this window running under XWayland?\nThe monitor’s position on the x axis (not irl ofc)\nThe layer’s y position\nThe y position of the cursor\nY position of first point\nY position of second point\nThe address of the parent\nThe name of the parent\nAdds a master to the master side. That will be the active …\nThe address of a window\nMakes all windows float\nMakes all windows pseudo tiled\nKeep the focus of the previously focused window\nIf the current window is the master, focuses the first …\nThis dispatcher brings the active window to the top of the …\nThis dispatcher centers the active window\nSwitches to the next window in a group.\nThis dispatcher changed the split ratio\nNew focus is the new child\nA Regular Expression to match the window class (handled by …\nThis dispatcher closes the specified window\nThis enum holds corners\nThe current monitor\nThis lets you use dispatchers not supported by hyprland-rs …\nThis enum holds a direction for cycling\nThis dispatcher cycles windows using a specified direction\nA delta\nThis enum holds directions, typically used for moving\nThe monitor that is to the specified direction of the …\nMoves the window in a specified direction\nThe struct that provides all dispatching methods\nThis enum holds every dispatcher\nThe first available empty workspace\nThe first available empty workspace\nThe exact size\nThis dispatcher executes a program\nThis exits Hyprland <strong>(DANGEROUS)</strong>\nSwitch focus from current to previously focused window\nFocuses the master window.\nParam for DispatchType::FocusMaster dispatcher\nThis dispatcher focuses a specified monitor\nThis dispatcher jump to urgent or the last window\nThis dispatcher focuses a specified window\nThis dispatcher forces the renderer to reload\nThis enum holds the fullscreen types\nExecutes a Global Shortcut using the GlobalShortcuts …\nThe monitor id\nThe workspace Id\nThe workspace Id\nThis dispatcher kills the active window/client\nLock Group\nLocks the groups\nEnum used with DispatchType::LockGroups, to determine how …\nNew focus is the new master window\nFocus stays at master, (even if it was selected before)\nMaximizes the window\nMoves the window to a specified monitor\nThis enum is used for identifying monitors\nThis dispatcher moves the active window using a Position …\nThis dispatcher moves the current workspace to a specified …\nThis dispatcher moves the cursor to a specified position …\nThis dispatcher moves the cursor to a specified corner of …\nThis dispatcher moves the window focus in a specified …\nMoves the active window into a group in a specified …\nMoves the active window out of a group.\nThis dispatcher moves a window (focused if not specified) …\nThis dispatcher moves a window (focused if not specified) …\nThis dispatcher moves the current window to a monitor or …\nThis dispatcher moves the specified window using a Position…\nThis dispatcher moves a specified workspace to a specified …\nThe monitor name\nThe name of the workspace\nThe name of the workspace\nPasses no param\nSets the orientation for the current workspace to bottom …\nSets the orientation for the current workspace to center …\nSets the orientation for the current workspace to left …\nCycle to the next orientation for the current workspace …\nCycle to the previous orientation for the current …\nSets the orientation for the current workspace to right …\nSets the orientation for the current workspace to top …\nThis dispatcher passes a keybind to a window when called …\nThis enum is used for resizing and moving windows precisely\nThe previous Workspace\nThe previous Workspace\nThe window’s process Id\nFills the whole screen\nThe workspace relative to the current workspace\nThe workspace relative to the current workspace\nThe workspace relative to the current workspace\nThe workspace on the monitor relative to the current …\nThe workspace on the monitor relative to the current …\nThe workspace on the monitor relative to the current …\nThe workspace on the monitor relative to the current …\nThe open workspace relative to the current workspace\nThe open workspace relative to the current workspace\nRemoves a master from the master side. That will be the …\nThis dispatcher renames a workspace\nThis dispatcher resizes the active window using a Position …\nThis dispatcher resizes the specified window using a …\nThis dispatcher changes the current cursor\nThe special workspace\nThis dispatcher swaps the active workspaces of two monitors\nThis dispatcher swaps the focused window with the window …\nThis dispatcher swaps windows using a specified direction\nSwaps the current window with master. If the current …\nParam for DispatchType::SwapWithMaster dispatcher\nThe window title\nThis dispatcher sets the DPMS status for all monitors\nThis dispatcher toggles the focused window’s internal …\nThis dispatcher floats a window (current if not specified)\nThis dispatcher toggles the current window fullscreen state\nToggles the current active window into a group\nToggle lock state of Group\nThis dispatcher toggle opacity for the current …\nThis dispatcher pins the active window to all workspaces\nThis dispatcher toggles pseudo tiling for the current …\nThis toggles the special workspace (AKA scratchpad)\nToggles the split (top/side) of the current window. …\nUnlock Group\nThis enum is for identifying a window\nThis enum is the params to DispatchType::MoveWindow …\nThis enum holds a direction for switch windows in a group\nThis dispatcher changes the current workspace\nThis enum is for identifying workspaces\nThis enum is for identifying workspaces that also includes …\nThis dispatcher applied a option to all windows in a …\nThis enum holds options that are applied to the current …\nThis function calls a specified dispatcher (blocking)\nThis function calls a specified dispatcher (async)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn event that emits when the active monitor is changed, it …\nAn event that emits when the active window is changed …\nThis struct is used for adding event handlers and …\nAn event that emits when the current special workspace is …\nThis struct holds changed special event data\nAn event that emits when hyprland is reloaded, it is the …\nThis enum holds every event type\nThis struct is used for adding event handlers and …\nEvent listener, but Stream This is the new prefered way of …\nAn event that emits when the floating state of a window …\nAn event that emits when the current fullscreen state is …\nAnd event that emits when a group is toggled, it is the …\nThis struct holds the data for the Event::GroupToggled …\nAn event that emits when <code>ignoregrouplock</code> is toggled, it is …\nAn event that emits when a layer shell surface is …\nAn event that emits when a layer shell surface is …\nAn event that emits when the layout of a keyboard changes, …\nThe data for the event executed when changing keyboard …\nAn event that emits when <code>lockgroups</code> is toggled, it is the …\nAn event that emits when a new monitor is added/connected, …\nThis struct holds monitor event data\nThis struct holds monitor event data\nAn event that emits when a monitor is removed/disconnected,\nThis struct holds workspace event data when the workspace …\nAn event that emits when the screencopy state of a client …\nEvent data for screencast event\nAn event that emits when a special workspace is closed on …\nThe mutable state available to Closures\nAn event that emits when the current keybind submap …\nAn unknown event\nThis struct represents an unknown event to hyprland-rs …\nAn event that emits when the a window requests the urgent …\nAn event that emits when a window is closed, it is the …\nThis struct holds window event data\nThis struct holds window float event data\nThe data for the event executed when moving a window to a …\nAn event that emits when a window is moved to a different …\nAnd event that emits when a window is moved into a group, …\nAnd event that emits when a window is moved out of a group,\nThe data for the event executed when opening a new window\nAn event that emits when a window is opened, it is the …\nThis struct holds window pin event data\nAn event that emits when a window is pinned or unpinned, …\nAn event that emits when the title of a window changes, it …\nThis struct holds the event data for the windowtitle …\nAn event that emits when a workspace is created, it is the …\nAn event that emits when the current workspace is changed, …\nAn event that emits when a workspace is deleted, it is the …\nThis struct holds workspace event data\nAn event that emits when a workspace is moved to another …\nThis struct holds workspace moved event data\nAn event that emits when a workspace is renamed, it is the …\nThe active monitor\nThe active workspace\nThis method adds an event which executes when“the active …\nThis method adds an event which executes when the active …\nThis method adds an event which executes when“the active …\nThis method adds an event which executes when the active …\nThis method adds an event which executes when“a monitor…\nThis method adds an event which executes when a monitor’…\nThis method adds an event which executes when“the …\nThis method adds an event which executes when the …\nThis method adds an event which executes when“the float …\nThis method adds an event which executes when the float …\nThis method adds an event which executes when“the …\nThis method adds an event which executes when the …\nThis method adds an event which executes when“a group …\nThis method adds an event which executes when a group was …\nThis method adds an event which executes when“the state …\nThis method adds an event which executes when the state of …\nThis method adds an event which executes when“a layer is …\nThis method adds an event which executes when a layer is …\nThis method adds an event which executes when“a new …\nThis method adds an event which executes when a new layer …\nThis method adds an event which executes when“the …\nThis method adds an event which executes when the keyboard …\nThis method adds an event which executes when“the state …\nThis method adds an event which executes when the state of …\nThis method adds an event which executes when“a new …\nThis method adds an event which executes when a new …\nThis method adds an event which executes when“a monitor …\nThis method adds an event which executes when a monitor is …\nThis method adds an event which executes when“the …\nThis method adds an event which executes when the …\nThis method adds an event which executes when“a monitor…\nThis method adds an event which executes when a monitor’…\nThis method adds an event which executes when“the submap …\nThis method adds an event which executes when the submap …\nThis method adds an event which executes when“the state …\nThis method adds an event which executes when the state of …\nThis method adds an event which executes when“the urgent …\nThis method adds an event which executes when the urgent …\nThis method adds an event which executes when“a window …\nThis method adds an event which executes when a window is …\nThis method adds an event which executes when“a window …\nThis method adds an event which executes when a window is …\nThis method adds an event which executes when“a window …\nThis method adds an event which executes when a window was …\nThis method adds an event which executes when“a window …\nThis method adds an event which executes when a window was …\nThis method adds an event which executes when“a window …\nThis method adds an event which executes when a window is …\nThis method adds an event which executes when“the pinned …\nThis method adds an event which executes when the pinned …\nThis method adds an event which executes when“a window …\nThis method adds an event which executes when a window …\nThis method adds an event which executes when“a …\nThis method adds an event which executes when a workspace …\nThis method adds an event which executes when“on …\nThis method adds an event which executes when on workspace …\nThis method adds an event which executes when“a …\nThis method adds an event which executes when a workspace …\nThis method adds an event which executes when“a …\nThis method adds an event which executes when a workspace …\nThis method adds an event which executes when“a …\nThis method adds an event which executes when a workspace …\nThe window address\nThe window address\nThe window address\nThe window address\nThe args as a string\nThe window class\nthe monitor’s description\nExecute changes in state\nExecute changes in state\nThe float state\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe fullscreen state\nThe window id\nThe window id\nThe window id\nThe monitor’s id\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKeyboard name\nLayout name\nOwner type, is it a monitor?\nThe monitor name\nThe monitor name\nThe monitor name\nThe workspace name\nThe workspace name\nThe workspace name\nThe monitor’s name\nThe event’s name\nThis method creates a new EventListener instance\nThis method creates a new EventListener instance\nCreates a new EventStream\nTakes the amount of args, and splits the string correctly\nThe pin state\nThis method starts the event listener (blocking)\nThis method starts the event listener (async)\nThis method starts the event listener (async)\nThe window title\nThe window title\nThe toggle status, <code>false</code> means the group was destroyed\nState/Is it turning on?\nWindow address\nWindow address\nThe window addresses associated with the group\nWindow class\nWindow title\nthe workspace id\nThe workspace name\nThe workspace name\nThe workspace name\nThe workspace name\nA floating point (64-point)\nA integer (64-bit)\nThis struct holds a keyword\nThis enum holds the possible values of a keyword/option\nA string\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis function returns the value of a keyword\nThis function returns the value of a keyword (async)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe identifier (or name) of the keyword\nThis function sets a keyword’s value\nIs value overriden or not\nThis function sets a keyword’s value (async)\nThe value of the keyword/option\nThis trait provides a standardized way to get data\nTrait for helper functions to get the active of the …\nTrait for helper functions to get the active of the …\nThis trait provides a standardized way to get data in a …\nCreates a async closure\nThis method gets the data\nThis method gets the active data\nThis method gets the active data\nThis method gets the active data (async)\nThis method gets the active data (async)\nThis method gets the data (async)\nThis method returns a vector of data\nThe address struct holds a address as a tuple with a …\nThis struct defines the content of a command, which …\nThis enum defines the possible command flags that can be …\nAn empty flag.\nError that occurs when parsing UTF-8 string\nThis trait provides a standardized way to get data\nTrait for helper functions to get the active of the …\nTrait for helper functions to get the active of the …\nThis trait provides a standardized way to get data in a …\nError that unifies different error types used by …\nInternal Hyprland error\nError coming from std::io\nThe JSON flag.\nThis type provides the id used to identify monitors\nDispatcher returned non <code>ok</code> value\nError that occurs for other reasons. Avoid using this.\nA named workspace\nError coming from serde\nThe special workspace\nThis type provides the id used to identify workspaces\nThis enum holds workspace data\nConverts the command content to a byte vector.\nCreates a <code>CommandContent</code> instance with the given flag and …\nThe data string for the command.\nThe flag for the command.\nFormats the command content as a string for display.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis method gets the data\nThis method gets the active data\nThis method gets the active data\nThis method gets the active data (async)\nThis method gets the active data (async)\nThis method gets the data (async)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis creates a new address from a value that implements …\nCreate a Hyprland error with dynamic data.\nThis method returns a vector of data\nTry to get an owned version of the internal error.")